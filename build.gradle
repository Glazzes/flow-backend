plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.1.0'
    id 'checkstyle'
    id 'pmd'
}

group = 'com.glaze'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(17))
		vendor.set(JvmVendorSpec.AMAZON)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
}

pmd {
    consoleOutput = true
    rulesMinimumPriority.set(5)
    sourceSets = List.of(
            project.sourceSets.named('main').get(),
            project.sourceSets.named('test').get()
    )
    ruleSets = List.of()
    ruleSetFiles = files(
            "$projectDir/config/pmd/best-practices.xml",
            "$projectDir/config/pmd/performance.xml",
            "$projectDir/config/pmd/error-prone.xml"
    )
}

tasks.named('test') {
	useJUnitPlatform()
}
